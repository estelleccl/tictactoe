c
exit
c
score
c
depth
scores
board
c
board
c
score
c
board
c
score
c
depth
board
score
core
c
exit
board
c
board
c
exit
board.available_boxes.length.even?
board.available_boxes
self
c
marker
choice
c
n
board.available_boxes
n
c
board.available_boxes
c
board.available_boxes
board
c
n
box
player2
c
n
board.available_boxes.length
board.available_boxes
n
board.available_boxes
board
n
c
n
board.game_over?
board.tie?
board
c
negamax(board,self.marker,switch_marker(self.marker))
exit
negamax(board,self.marker,switch_marker(self.marker))
switch_marker(self.marker)
switch_marker(self.marker
self.marker
board
c
n
switch_marker(self.marker)
self.marker
self/marker
board
c
exit
scores.min_by {|_k,v| v }
scores.max_by {|_k,v| v }
scores
@marker
player_marker
c
8
7
c
exit
computer_move
exit
@board
exit
c
computer_move
c
@board
c
computer_move
c
exit
depth
best_score
best_move
n
c
exit
computer_move
exit
c
computer_move
c
exit
computer_move
c
computer_move
c
exit
computer_move
c
computer_move
c
computer_move
c
computer_move
c
exit
computer_move
board
@board
computer_move
c
exit
computer_move
c
exit
best_score
c
exit
best_score
c
exit
computer_move
exit
scores.max_by {|_k,v| v }
scores.min_by {|_k,v| v }
player_marker == @marker
player_marker
scores
c
exit
c
exit
best_score
@best_choice
n
board.winner
n
board.game_over?
n
c
board.game_over?
n
c
self
winner != nil || tie?
c
winner != nil || tie?
self
c
self
winner != nil || tie?
c
winner != nil || tie?
self
c
self
winner != nil || tie?
c
winner != nil || tie?
@board
c
self
se;f
@board
winner != nil || tie?
c
winner != nil || tie?
c
winner != nil || tie?
exit
computer_move
c
self.marker
board
borad
@board
computer_move
c
@board
c
@board
c
@board
c
@board
exit
c
board
c
cc
board
c
board
c
board
c
board
temp_board
c
temp_board
board
c
exit
c
temp_board
board
c
board
temp_board
c
board
temp_board
c
temp_board
board
c
exit
board
temp_board
c
board
temp_board
exit
@board
c
exit
computer_move
self.marker
self
c
computer_move
exit
computer_move
c
@best_choice
best_score
c
exit
